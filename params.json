{"name":"Jfreesane","tagline":"Java API to talk to the SANE scanning daemon","body":"JFreeSane is a pure-Java implementation of a SANE client. See [the SANE project\r\npage](http://www.sane-project.org/) for more information about SANE itself.\r\n\r\n- [Introduction](#introduction)\r\n- [Getting JFreeSane](#getting-jfreesane)\r\n- [Limitations](#limitations)\r\n- [Please contribute](#please-contribute)\r\n- [Usage](#usage)\r\n    - [Connecting to SANE](#connecting-to-sane)\r\n    - [Obtaining a device handle](#obtaining-a-device-handle)\r\n    - [Listing known devices](#listing-known-devices)\r\n    - [Opening the device](#opening-the-device)\r\n    - [Acquiring an image](#acquiring-an-image)\r\n    - [Reading from an automatic document feeder](#reading-from-an-automatic-document-feeder)\r\n    - [Device options](#device-options)\r\n        - [Setting options](#setting-options)\r\n        - [Reading options](#reading-options)\r\n        - [Option getters and setters](#option-getters-and-setters)\r\n\r\n# Introduction\r\n\r\nThe purpose of this library is to provide a client to the Scanner Access Now Easy (SANE) daemon.\r\nThis allows Java programmers to obtain images from SANE image sources over a network.\r\n\r\nFor example, you can do the following:\r\n\r\n```java\r\nSaneSession session = SaneSession.withRemoteSane(\r\n    InetAddress.getByName(\"my-sane-server.intranet\"));\r\nList<SaneDevice> devices = session.listDevices();\r\nSaneDevice device = ...;  // determine which device you want to use\r\ndevice.open();\r\n\r\nBufferedImage image = device.acquireImage();  // scan an image\r\n```\r\n\r\n# Getting JFreeSane\r\n\r\nThe easiest way to get this software is using [Maven](http://maven.apache.org/). Put the following in your `pom.xml`:\r\n\r\n```xml\r\n<project>\r\n  ...\r\n  <dependencies>\r\n     ...\r\n     <dependency>\r\n       <groupId>com.googlecode.jfreesane</groupId>\r\n       <artifactId>jfreesane</artifactId>\r\n       <version>0.9</version>\r\n     </dependency>\r\n   </dependencies>\r\n</project>\r\n```\r\n\r\nOtherwise, you can [download the jar file](https://github.com/sjamesr/jfreesane/releases/tag/jfreesane-0.9)\r\nand put it in your project's CLASSPATH.\r\nJFreeSane also depends on [Google Guava](http://code.google.com/p/guava-libraries/), an\r\nexcellent collection of Java libraries that you should be using in your project anyway.\r\nYou will need to download the Guava JAR file and put that in your classpath as well.\r\n\r\nOnce JFreeSane is available on your classpath, see the CommonOperations wiki page for a tutorial on how to use it.\r\n\r\nAlso consider joining the\r\n[jfreesane-discuss](http://groups.google.com/group/jfreesane-discuss) mailing list.\r\nIt is a low-volume list where people can discuss JFreeSane, release announcements are\r\nmade and issues are reported.\r\n\r\n# Limitations\r\n\r\n* ~~JFreeSane currently cannot be used to obtain images from a handheld scanner.~~\r\nFixed in 0.9!\r\n\r\n* JFreeSane currently does not support using SANE authenticated resources\r\n(i.e. a username and password).\r\n\r\n* JFreeSane must be used with a running SANE daemon. It will not run SANE for you.\r\nIt cannot talk to your scanners without a SANE daemon.\r\n\r\n# Please contribute\r\n\r\nIf you've been looking for a Java SANE client and you're familiar with SANE, please\r\nconsider contributing documentation or patches. The easiest way to get started with\r\nEclipse is to do this:\r\n\r\n```\r\n$ git clone https://github.com/sjamesr/jfreesane.git\r\n$ cd jfreesane\r\n~/jfreesane$ mvn eclipse:configure-workspace \\\r\n    -Declipse.workspace=/path/to/eclipse/workspace  # eclipse workspace, not working directory\r\njfreesane$ mvn eclipse:eclipse\r\n```\r\n* run eclipse, import existing project, specify this jfreesane directory \r\nas the project root\r\n* start hacking\r\n\r\nIf you want to contribute back to JFreeSane, please consider [forking](https://help.github.com/articles/fork-a-repo)\r\nthe project. Once you have some code you'd like to contribute,\r\n[submit a pull request](https://help.github.com/articles/using-pull-requests). We really appreciate contributions\r\nand we'll get it checked in as fast as possible.\r\n\r\n# Usage\r\n\r\nHere are some ways you can use JFreeSane.\r\n\r\n## Connecting to SANE\r\n\r\nJFreeSane is strictly a client of the [SANE](http://www.sane-project.org/) network daemon.\r\nYou must have a SANE daemon running first before you can do anything with JFreeSane.\r\nDiscussing how to set up a SANE daemon is beyond the scope of this document, please refer to the [SANE home page](http://www.sane-project.org/) for guidance.\r\n\r\nOnce you have the daemon running on some host, for example `saneserver.mydomain.com`, you\r\ncan start a SANE session with the following:\r\n\r\n```java\r\nimport au.com.southsky.jfreesane.SaneSession;\r\n\r\nInetAddress address = InetAddress.getByName(\"saneserver.mydomain.com\");\r\nSaneSession session = SaneSession.withRemoteSane(address);\r\n```\r\n\r\nNow you need to obtain a device handle.\r\n\r\n## Obtaining a device handle\r\n\r\nIf you already know the name of the SANE device, you can open it directly by name. For\r\nexample, SANE servers usually have (but do not advertise) a device whose name is \"test\".\r\nThis is a \"pseudo\" device, in that it does not represent any physical hardware. It is\r\nuseful for exercising JFreeSane.\r\n\r\n```java\r\n// Open the test device by name\r\nSaneSession session = ...;\r\nSaneDevice device = session.getDevice(\"test\");\r\n```\r\n\r\n## Listing known devices\r\n\r\nIf you do not know the device name, you can list devices known to the SANE server using the following:\r\n\r\n```java\r\nSaneSession session = ...;\r\nList<SaneDevice> devices = session.listDevices();\r\n```\r\n\r\n## Opening the device\r\n\r\nMost likely, you now want to interact with the scanning device. Before you do anything, you need to \"`open`\" the device.\r\n\r\n```java\r\nSaneDevice device = ...;\r\ndevice.open();\r\n```\r\n\r\nThe device is now open. You can now get and set options and acquire images.\r\n\r\n## Acquiring an image\r\n\r\nNow you're ready to acquire an image from the scanner. Call `acquireImage`:\r\n\r\n```java\r\nSaneDevice device = ...;\r\ndevice.open();\r\nBufferedImage image = device.acquireImage();\r\n```\r\n\r\nIf the default options are not sufficient, see the \"Device options\" section below.\r\n\r\n## Reading from an automatic document feeder\r\n\r\nYou may have a scanner with an Automatic Document Feeder (ADF). In this case, you may\r\nwant to acquire all the images until the ADF is out of paper. Use the following technique:\r\n\r\n```java\r\nSaneDevice device = ...;\r\n\r\n// this value is device-dependent. See the section on \"Setting Options\" to find out\r\n// how to enumerate the valid values\r\ndevice.getOption(\"source\").setStringValue(\"Automatic Document Feeder\");\r\n\r\nwhile (true) {\r\n  try {\r\n    BufferedImage image = device.acquireImage();\r\n    process(image);\r\n  } catch (SaneException e) {\r\n    if (e.getStatus() == SaneStatus.STATUS_NO_DOCS) {\r\n      // this is the out of paper condition that we expect\r\n      break;\r\n    } else {\r\n      // some other exception that was not expected\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Device options\r\n\r\nEach device has a set of parameters that control aspects of that device's operation.\r\nThere are a handful of SANE \r\n[built-in options](http://www.sane-project.org/html/doc014.html):\r\n\r\n  * scan resolution\r\n  * preview mode\r\n  * scan area\r\n\r\nDifferent scanners have different capabilities (for example, duplex scan, color, various\r\ndocument sources). Each scanner type will expose a set of options in addition to the ones\r\ndescribed above.\r\n\r\nIn order to see what options are supported by a device:\r\n\r\n```java\r\nSaneDevice device = ...;\r\ndevice.open();\r\nList<SaneOption> options = device.listOptions();\r\n```\r\n\r\nEach option has\r\n\r\n  * a name, used as an identifier by JFreeSane (e.g. mode)\r\n  * a title, in English, suitable for display to the user (e.g. Scan Mode)\r\n  * description, a brief description of the purpose of the option\r\n\r\n### Setting options\r\n\r\nYou can set the value of an option, so long as \r\n`SaneOption.isActive()` and `SaneOption.isWriteable` are both true. For example, the\r\n\"mode\" option's value can be set by the following:\r\n\r\n```java\r\nSaneOption option = device.getOption(\"mode\");\r\noption.setStringValue(\"Auto Document Feeder\");\r\n```\r\n\r\nThe string \"Auto Document Feeder\" may not be correct for your particular device.\r\nIn fact, valid option values differ from device to device. In this case, you may\r\nneed to ask SANE what values are valid for a given option.\r\n\r\n```java\r\nSaneOption option = device.getOption(\"mode\");\r\nList<String> validValues = option.getStringConstraints();\r\n```\r\n\r\n`validValues` now contains a list of strings, each of which is a valid value for this\r\noption.\r\n\r\nThere are some options whose valid values are in some range. For example, the \"pixma\"\r\nbackend has an option called \"tl-x\" (the x-ordinate of the top left of the scan area).\r\nIts valid values are in the range 0 to 216.069 millimeters.\r\nTo determine this programmatically:\r\n\r\n```java\r\nSaneOption option = device.getOption(\"tl-x\");\r\nassert option.isConstrained() \r\n    && option.getConstraintType() == OptionValueConstraintType.RANGE_CONSTRAINT;\r\nRangeConstraint constraint = option.getRangeConstraint();\r\n\r\n// this option is in mm, which is a fractional value. SANE uses fixed-point arithmetic,\r\n// so JFreeSane calls this a value of type \"FIXED\"\r\nassert option.getType() == OptionValueType.FIXED;\r\nassert option.getUnits() == SaneOption.OptionUnits.UNITS_MM;\r\n\r\ndouble min = constraint.getMinimumFixed();\r\ndouble max = constraint.getMaximumFixed();\r\n```\r\n\r\nTo set the value of the \"tl-x\" option, you can do the following:\r\n\r\n```java\r\nSaneOption option = device.getOption(\"tl-x\");\r\ndouble actualValue = option.setFixedValue(97.5);\r\n```\r\n\r\nJFreeSane will return the value actually set by the backend. For example, the valid\r\nvalues for \"tl-x\" are 0 to 216.069 (see the preceding section to see how this can be\r\ndetermined programmatically). If you set the value to something out of range, SANE will\r\nclamp the value to something in the valid range.\r\n\r\n```java\r\nSaneOption option = device.getOption(\"tl-x\");\r\ndouble actualValue = option.setFixedValue(-4);\r\n// actualValue will be set to 0, the minimum value for this option\r\n```\r\n\r\n### Reading options\r\n\r\nThe methods for reading option values depend on the option's type. Options are readable\r\nonly if `isActive()` and `isReadable()` are true for the option. See the table in the\r\nfollowing section for the list of option accessors.\r\n\r\n### Option getters and setters\r\n\r\nThe following table lists the `SaneOption` methods for reading and writing options of a given type:\r\n\r\n| *`SaneOption.getType()`* | *Getter* | *Setter* |\r\n|--------------------------|----------|----------|\r\n| `BOOLEAN` | `getBooleanValue` | `setBooleanValue` |\r\n| `INT` | `getIntegerValue` | `setIntegerValue` |\r\n| `FIXED` | `getFixedValue` | `setFixedValue` |\r\n| `STRING` | `getStringValue` | `setStringValue` |\r\n| `BUTTON` | None | `setButtonValue` |\r\n| `GROUP` | None | None |\r\n\r\nAdditionally, `INT`- and `FIXED`-type options may actually be an array of `INT` or\r\n`FIXED`. You can always use `SaneOption.getValueCount` to know for sure. \r\nIf the result is more than 1, you have an array.\r\n\r\n  * `getIntegerArrayValue` reads an INT array, `setIntegerValue(List<Integer>)` writes one\r\n  * `getFixedArrayValue` reads a FIXED array, `setFixedValue(List<Double>)` writes one\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}